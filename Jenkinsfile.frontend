/*
 * Copyright 2025 com.core
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// Jenkinsfile for the Frontend Application
pipeline {
    // Define the agent at the top level. This will be the default agent.
    // Individual stages can override this if they need a different environment.
    agent any
 
    environment {
        // --- Configuration: Set these values for your environment ---
        PROJECT_ID         = "code-with-intellij-gemini"
        FRONTEND_BUCKET    = "gs://www-cafe-management-system-your-unique-identifier" // <-- IMPORTANT: CHANGE THIS
        GCP_CREDENTIALS_ID = "gcp-jenkins-creds"
 
        // The output directory of the 'ng build' command, relative to the 'frontend' folder.
        ANGULAR_BUILD_DIR  = "dist/Frontend/"
    }
 
    stages {
        // Stage 1: Checkout code once at the beginning.
        stage('Checkout') {
             steps {
                 echo "CoreCICD :: Checkout : Cleaning workspace and checking out source code..."
                 // Clean the workspace before checkout to ensure a fresh start.
                 cleanWs()
                 checkout scm
             }
         }
  
        // Stage 2: Build the Angular application.
        stage('Build Angular App') {
            // Override the agent for this stage to use a specific Node.js environment.
            agent {
                docker { image 'node:16-slim' }
            }
            environment {
                // Set the npm cache to a writable directory within the workspace to prevent permission errors.
                NPM_CONFIG_CACHE = "frontend/npm-cache"
            }
             steps {
                 // All commands in this stage run relative to the 'frontend' directory.
                 dir('frontend') { 
                    echo "CoreCICD :: Build : Installing npm dependencies..."
                     sh 'npm install'
                     
                     echo "CoreCICD :: Build : Building Angular application for production..."
                     sh 'npm run build'
                 }
                 
                 echo "CoreCICD :: Build : Stashing build artifacts for the deploy stage..."
                 // *** FIX: Use the full path from the workspace root for stashing. ***
                 // This ensures Jenkins finds the files created by the build step.
                 stash name: 'angular-app', includes: "frontend/${ANGULAR_BUILD_DIR}/**"
             }
         }
  
        // Stage 3: Deploy the built application to Google Cloud Storage.
        stage('Deploy to Cloud Storage') {
            // Override the agent for this stage to use the Google Cloud SDK environment.
            agent {
                docker { image 'google/cloud-sdk:latest' }
            }
            environment {
                // Set the gcloud config to a writable directory to prevent permission errors.
                CLOUDSDK_CONFIG = "gcloud-config"
            }
             steps {
                echo "CoreCICD :: Deploy : Unstashing build artifacts..."
                // Restore the files that were saved in the previous stage.
                unstash 'angular-app'

                echo "CoreCICD :: Deploy : Deploying frontend to Cloud Storage bucket: ${FRONTEND_BUCKET}"
                withCredentials([file(credentialsId: GCP_CREDENTIALS_ID, variable: 'GCP_KEY_FILE')]) {
                    echo "CoreCICD :: Deploy : Authenticating with Google Cloud..."
                    sh 'gcloud auth activate-service-account --key-file=$GCP_KEY_FILE'

                    echo "CoreCICD :: Deploy : Syncing build artifacts to the bucket..."
                    // The path is now relative to the current workspace, as unstash restores it here.
                    sh "gcloud storage rsync ${ANGULAR_BUILD_DIR} ${FRONTEND_BUCKET} --delete-unmatched-destination-objects --recursive"
                }
             }
         }
     }
  
     post {
         // The 'always' block is now redundant because cleanWs() is in the Checkout stage.
         // This is a cleaner pattern.
         success {
             echo "CoreCICD :: Post-Build : SUCCESS : Pipeline completed successfully."
         }
         failure {
             echo "CoreCICD :: Post-Build : FAILURE : Pipeline failed. Please review the logs."
         }
     }
}