/*
 * Copyright 2025 com.core
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Jenkinsfile for the Frontend Application
pipeline {
    agent any // A top-level agent is needed for the post block to work correctly.

    environment {
        // --- Configuration: Set these values for your environment ---
        PROJECT_ID         = "code-with-intellij-gemini"
        FRONTEND_BUCKET    = "gs://www-cafe-management-system-your-unique-identifier" // <-- IMPORTANT: CHANGE THIS
        GCP_CREDENTIALS_ID = "gcp-jenkins-creds"
 
        // The output directory of the 'ng build' command, relative to the 'frontend' folder.
        ANGULAR_BUILD_DIR  = "dist/Frontend/"
    }

    stages {
        stage('Checkout') {
             steps {
                 echo "CoreCICD :: Checkout : Cleaning workspace and checking out source code..."
                 cleanWs()
                 checkout scm
             }
        }

        stage('Build Angular App') {
            // This stage uses a Node.js image, which is optimized for building JS/TS projects.
            agent {
                docker { image 'node:16-slim' }
            }
            steps {
                // Run build steps inside the 'frontend' directory where package.json is located.
                dir('frontend') { 
                    echo "CoreCICD :: Build : Installing npm dependencies..."
                    sh 'npm cache clean --force'
                    sh 'npm install --cache .npm'
                    
                    echo "CoreCICD :: Build : Building Angular application for production..."
                    // Using npm run build is best practice as it uses the command from package.json
                    sh 'npm run build'
                }
                // Stash the build artifacts to use in the next stage.
                stash name: 'angular-app', includes: "frontend/${ANGULAR_BUILD_DIR}/**"
            }
        }

        stage('Deploy to Cloud Storage') {
            // This stage uses the Google Cloud SDK image, which has the 'gcloud' command.
            agent {
                docker { image 'google/cloud-sdk:latest' }
            }
            steps {
                // Unstash the build artifacts from the previous stage.
                unstash 'angular-app'
                echo "CoreCICD :: Deploy : Deploying frontend to Cloud Storage bucket: ${FRONTEND_BUCKET}"
                withCredentials([file(credentialsId: GCP_CREDENTIALS_ID, variable: 'GCP_KEY_FILE')]) {
                    echo "CoreCICD :: Deploy : Authenticating with Google Cloud..."
                    sh 'gcloud auth activate-service-account --key-file=$GCP_KEY_FILE'
   
                    echo "CoreCICD :: Deploy : Syncing build artifacts to the bucket..."
                    sh "gcloud storage rsync frontend/${ANGULAR_BUILD_DIR} ${FRONTEND_BUCKET} --delete-unmatched-destination-objects --recursive"
                }
            }
        }
    }

    post {
        always {
            echo "CoreCICD :: Cleanup : Cleaning up Jenkins workspace..."
            cleanWs()
        }
    }
}