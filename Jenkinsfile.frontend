/*
 * Copyright 2025 com.core
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Jenkinsfile for the Frontend Application
pipeline {
    // *** FIX: Use a single, powerful Docker agent for the entire pipeline. ***
    // The google/cloud-sdk image contains git, node, npm, and gcloud.
    // This simplifies the pipeline by using one shared workspace for all stages,
    // eliminating the need for stash/unstash and complex agent definitions.
    agent {
        docker {
            image 'google/cloud-sdk:latest'
        }
    }

    environment {
        // --- Configuration: Set these values for your environment ---
        PROJECT_ID         = "code-with-intellij-gemini"
        FRONTEND_BUCKET    = "gs://www-cafe-management-system-your-unique-identifier" // <-- IMPORTANT: CHANGE THIS
        GCP_CREDENTIALS_ID = "gcp-jenkins-creds"

        // The output directory of the 'ng build' command, relative to the 'frontend' folder.
        ANGULAR_BUILD_DIR  = "dist/Frontend/"

        // --- FIX: Set all configuration variables needed for the pipeline here. ---
        // This prevents permission errors for both npm and gcloud.
        NPM_CONFIG_CACHE = "frontend/npm-cache"
        CLOUDSDK_CONFIG  = "gcloud-config"
    }

    stages {
        // Stage 1: Checkout code
        stage('Checkout') {
            steps {
                echo "CoreCICD :: Checkout : Cleaning workspace and checking out source code..."
                cleanWs()
                checkout scm
            }
        }

        // Stage 2: Build the Angular application
        stage('Build Angular App') {
            steps {
                // All commands in this stage run relative to the 'frontend' directory.
                dir('frontend') {
                    echo "CoreCICD :: Build : Installing npm dependencies..."
                    sh 'npm install'

                    echo "CoreCICD :: Build : Building Angular application for production..."
                    sh 'npm run build'
                }
            }
        }

        // Stage 3: Deploy the built application to Google Cloud Storage
        stage('Deploy to Cloud Storage') {
            steps {
                // The 'dist' folder from the previous stage is already available in the workspace.
                echo "CoreCICD :: Deploy : Deploying frontend to Cloud Storage bucket: ${FRONTEND_BUCKET}"
                withCredentials([file(credentialsId: GCP_CREDENTIALS_ID, variable: 'GCP_KEY_FILE')]) {
                    echo "CoreCICD :: Deploy : Authenticating with Google Cloud..."
                    sh 'gcloud auth activate-service-account --key-file=$GCP_KEY_FILE'

                    echo "CoreCICD :: Deploy : Syncing build artifacts to the bucket..."
                    sh "gcloud storage rsync frontend/${ANGULAR_BUILD_DIR} ${FRONTEND_BUCKET} --delete-unmatched-destination-objects --recursive"
                }
            }
        }
    }

    post {
        success {
            echo "CoreCICD :: Post-Build : SUCCESS : Pipeline completed successfully."
        }
        failure {
            echo "CoreCICD :: Post-Build : FAILURE : Pipeline failed. Please review the logs."
        }
    }
}